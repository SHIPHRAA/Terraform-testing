name: Deploy Focust Application to Production

on:
  workflow_run:
    workflows: ["Terraform Infra"]
    types:
      - completed

permissions:
  contents: read
  actions: read
  deployments: write
  issues: write
  packages: write

env:
  REGISTRY: ghcr.io
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}

jobs:
  verify-dev:
    runs-on: ubuntu-latest
    steps:
      - name: Check dev branch status
        run: |
          # Extract repository name from github.repository context
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          REPO_OWNER=$(echo "${{ github.repository }}" | cut -d'/' -f1)

          echo "Checking repository: $REPO_OWNER/$REPO_NAME"

          # Query the workflow runs using gh api REST endpoint
          WORKFLOW_STATUS=$(gh api "repos/$REPO_OWNER/$REPO_NAME/actions/runs" \
            --jq '.workflow_runs | map(select(.head_branch == "dev")) | .[0].conclusion')

          echo "Latest workflow status: $WORKFLOW_STATUS"

          if [ -z "$WORKFLOW_STATUS" ] || [ "$WORKFLOW_STATUS" = "null" ]; then
            echo "No workflow runs found for dev branch"
          elif [ "$WORKFLOW_STATUS" != "success" ]; then
            echo "Latest dev branch workflow did not succeed (status: $WORKFLOW_STATUS)"
          fi

          echo "Dev branch workflow check passed"

  generate-tag:
    needs: verify-dev
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set_tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate version tag
        id: set_tag
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          TIMESTAMP=$(date +'%Y%m%d-%H%M%S')
          echo "tag=${SHORT_SHA}-${TIMESTAMP}" >> $GITHUB_OUTPUT

  create-issue:
    runs-on: ubuntu-latest
    if: failure()
    needs: [build, deploy]
    strategy:
      matrix:
        include:
          - job: build
            type: Frontend Build
            component: frontend
            error_env: FRONTEND_BUILD_OUTPUT
            path: ""
          - job: build
            type: Backend Build
            component: backend
            error_env: BACKEND_BUILD_OUTPUT
            path: ""
          - job: deploy
            type: Production Deployment
            component: deployment
            error_env: DEPLOY_OUTPUT
            path: "/"
    steps:
      - name: Create Issue
        if: needs[matrix.job].result == 'failure' && contains(needs[matrix.job].outputs.failed_components, matrix.component)
        uses: actions/github-script@v7
        with:
          script: |
            const errorOutput = process.env[`${{ matrix.error_env }}`] || '${{ matrix.type }} failed';
            const prompt = `Format this ${{ matrix.type }} error into a detailed GitHub issue with sections for Summary, Error Details, Possible Causes, and Recommended Actions. Include proper markdown formatting. Here's the error:\n\n${errorOutput}`;

            const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${process.env.OPENROUTER_API_KEY}`,
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                'model': 'openai/gpt-4',
                'messages': [
                  {
                    'role': 'system',
                    'content': 'You are a helpful assistant that formats ${{ matrix.type }} errors into well-structured GitHub issues.'
                  },
                  {
                    'role': 'user',
                    'content': prompt
                  }
                ],
                'max_tokens': 1024,
                'temperature': 0.2
              })
            });

            const openRouterResponse = await response.json();
            const formattedIssue = openRouterResponse.choices[0].message.content;

            const additionalInfo = {
              build: '',
              deploy: `\n- Environment: ${process.env.RUNNER_OS}\n- Target Host: ${process.env.VM_HOST}\n- Deployment Path: ${{ matrix.path }}`
            };

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸš¨ ${{ matrix.type }} Failure - ${new Date().toISOString().split('T')[0]}`,
              body: `${formattedIssue}\n\n### ${{ matrix.type }} Information\n- Commit: ${context.sha}\n- Branch: ${context.ref.split('/').pop()}\n- [View Workflow Run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})${additionalInfo[`${{ matrix.job }}`]}`,
              labels: ['build-failure', '${{ matrix.component }}', 'bug'],
              assignees: [context.actor]
            });

  build:
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    needs: [generate-tag]
    outputs:
      failed_components: ${{ steps.track_failures.outputs.failed_components }}
    strategy:
      matrix:
        service: [frontend, backend]
        include:
          - service: frontend
            context: ./frontend/src
            dockerfile: ./frontend/src/Dockerfile
          - service: backend
            context: ./backend
            dockerfile: ./backend/Dockerfile
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push
        id: build
        env:
          TWITTER_BEARER_TOKEN: ${{ secrets.TWITTER_BEARER_TOKEN }}
          TWITTER_CONSUMER_KEY: ${{ secrets.TWITTER_CONSUMER_KEY }}
          TWITTER_CONSUMER_SECRET: ${{ secrets.TWITTER_CONSUMER_SECRET }}
          TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
          TWITTER_BOT_USERNAME: ${{ secrets.TWITTER_BOT_USERNAME }}
          PERPLEXITY_API_URL: ${{ secrets.PERPLEXITY_API_URL }}
          PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          # Remove existing containers
          docker ps -a | grep "fact-check-prod-${{ matrix.service }}" && docker rm -f fact-check-prod-${{ matrix.service }}

          # Set build arguments based on service
          BUILD_ARGS=""
          if [ "${{ matrix.service }}" = "frontend" ]; then
            BUILD_ARGS="--build-arg NEXT_PUBLIC_API_URL=http://focustbackend:8000 \
                       --build-arg BUILD_VERSION=1.0.0 \
                       --build-arg NEXT_PUBLIC_SERVER_ENV=production \
                       --build-arg BUILD_TIMESTAMP=$(date +'%Y-%m-%d')"
          elif [ "${{ matrix.service }}" = "backend" ]; then
            BUILD_ARGS="--build-arg TWITTER_BEARER_TOKEN=$TWITTER_BEARER_TOKEN \
                       --build-arg NODE_ENV=$${{secrets.ENVIRONEMENT_STAGING}} \
                       --build-arg TWITTER_CONSUMER_KEY=$TWITTER_CONSUMER_KEY \
                       --build-arg TWITTER_CONSUMER_SECRET=$TWITTER_CONSUMER_SECRET \
                       --build-arg TWITTER_ACCESS_TOKEN=$TWITTER_ACCESS_TOKEN \
                       --build-arg TWITTER_ACCESS_TOKEN_SECRET=$TWITTER_ACCESS_TOKEN_SECRET \
                       --build-arg TWITTER_BOT_USERNAME=$TWITTER_BOT_USERNAME \
                       --build-arg PERPLEXITY_API_URL=$PERPLEXITY_API_URL \
                       --build-arg PERPLEXITY_API_KEY=$PERPLEXITY_API_KEY \
                       --build-arg DB_HOST=$DB_HOST \
                       --build-arg DB_PORT=$DB_PORT \
                       --build-arg DB_USER=$DB_USER \
                       --build-arg DB_PASSWORD=$DB_PASSWORD"
          fi

          # Build with cache and output capture
          BUILD_TAG="${{ needs.generate-tag.outputs.tag }}"
          echo "Using tag: $BUILD_TAG"

          # Verify directory exists
          if [ ! -d "${{ matrix.context }}" ]; then
            echo "${{ matrix.service }} source directory not found!"
            exit 1
          fi

          # Remove conflicting containers if they exist
          docker ps -a | grep "fact-check-prod-${{ matrix.service }}" && docker rm -f fact-check-prod-${{ matrix.service }}

          OUTPUT=$(DOCKER_BUILDKIT=1 docker build \
            $BUILD_ARGS \
            --cache-from ghcr.io/${{ github.repository_owner }}/focust-${{ matrix.service }}:latest \
            -t ghcr.io/${{ github.repository_owner }}/focust-${{ matrix.service }}:$BUILD_TAG \
            -t ghcr.io/${{ github.repository_owner }}/focust-${{ matrix.service }}:latest \
            -f ${{ matrix.dockerfile }} ${{ matrix.context }} 2>&1) || {
            if [ "${{ matrix.service }}" = "frontend" ]; then
              echo "FRONTEND_BUILD_OUTPUT<<EOF" >> $GITHUB_ENV
            else
              echo "BACKEND_BUILD_OUTPUT<<EOF" >> $GITHUB_ENV
            fi
            echo "$OUTPUT" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            exit 1
          }

          # Push images with retry logic
          for i in {1..3}; do
            if docker push ghcr.io/${{ github.repository_owner }}/focust-${{ matrix.service }}:$BUILD_TAG && \
               docker push ghcr.io/${{ github.repository_owner }}/focust-${{ matrix.service }}:latest; then
              break
            fi
            if [ $i -eq 3 ]; then
              exit 1
            fi
            sleep 5
          done

      - name: Track Build Failures
        id: track_failures
        if: failure()
        run: |
          echo "failed_components=${{ matrix.service }}" >> $GITHUB_OUTPUT

  deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [build, generate-tag]
    runs-on: ubuntu-latest
    environment:
      name: production
      url: http://35.243.114.128/
    outputs:
      deploy_success: ${{ steps.deploy.outputs.deploy_success }}
      failed_components: ${{ steps.track_failures.outputs.failed_components }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup SSH
        id: setup_ssh
        run: |
          BUILD_TAG="${{ needs.generate-tag.outputs.tag }}"
          echo "Using tag: $BUILD_TAG"
          if [ -z "${{ secrets.VM_SSH_PRIVATE_KEY }}" ]; then
            echo "Error: VM_SSH_PRIVATE_KEY secret is not set"
            exit 1
          fi

          mkdir -p ~/.ssh/
          echo "${{ secrets.VM_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Add the host key properly
          ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts

          cat > ~/.ssh/config << EOF
          Host ${{ secrets.VM_HOST }}
            User ${{ secrets.VM_USERNAME }}
            IdentityFile ~/.ssh/id_rsa
            StrictHostKeyChecking no
            ServerAliveInterval 60
            ServerAliveCountMax 3
          EOF

          chmod 600 ~/.ssh/config

      - name: Create .env file
        run: |
          cat > .env << EOF
          # Build Tags
          FRONTEND_TAG=${{ needs.generate-tag.outputs.tag }}
          BACKEND_TAG=${{ needs.generate-tag.outputs.tag }}
          COMPOSE_PROJECT_NAME=fact-check-prod
          GITHUB_REPOSITORY_OWNER=${{ github.repository_owner }}

          # Twitter API
          TWITTER_BEARER_TOKEN=${{ secrets.TWITTER_BEARER_TOKEN }}
          TWITTER_CONSUMER_KEY=${{ secrets.TWITTER_CONSUMER_KEY }}
          TWITTER_CONSUMER_SECRET=${{ secrets.TWITTER_CONSUMER_SECRET }}
          TWITTER_ACCESS_TOKEN=${{ secrets.TWITTER_ACCESS_TOKEN }}
          TWITTER_ACCESS_TOKEN_SECRET=${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
          TWITTER_BOT_USERNAME=${{ secrets.TWITTER_BOT_USERNAME }}

          # Perplexity API
          PERPLEXITY_API_URL=${{ secrets.PERPLEXITY_API_URL }}
          PERPLEXITY_API_KEY=${{ secrets.PERPLEXITY_API_KEY }}

          # Database
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_NAME=fact_check
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}

          # Environment
          ENVIRONMENT=production
          EOF

      - name: Copy files to production server
        run: |
          # Ensure the directory exists
          ssh ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }} "mkdir -p /home/${{ secrets.VM_USERNAME }}/fact-check-prod"

          # Copy docker-compose.yml and .env file
          scp docker-compose.yml ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }}:/home/${{ secrets.VM_USERNAME }}/fact-check-prod/
          scp .env ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }}:/home/${{ secrets.VM_USERNAME }}/fact-check-prod/

      - name: Deploy to VM
        id: deploy
        run: |
          BUILD_TAG="${{ needs.generate-tag.outputs.tag }}"
          echo "Using tag: $BUILD_TAG"
          OUTPUT=$(timeout 300 ssh "${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }}" <<EOF
            cd /home/${{ secrets.VM_USERNAME }}/fact-check-prod

            echo "Using build tag: $BUILD_TAG"

            # Handle container conflicts
            docker compose down --remove-orphans || true
            docker ps -a | grep "fact-check-prod" | awk '{print \$1}' | xargs -r docker rm -f

            # Pull the latest images
            docker compose pull

            # Start the containers
            docker compose up -d

            # Clean up unused resources
            docker system prune -f

            # List running containers
            echo "Running containers:"
            docker ps
          EOF
          ) 2>&1 || {
            echo "DEPLOY_OUTPUT<<EOF" >> $GITHUB_ENV
            echo "$OUTPUT" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            exit 1
          }
          echo "deploy_success=true" >> $GITHUB_OUTPUT

      - name: Track Deployment Failures
        id: track_failures
        if: failure()
        run: |
          echo "failed_components=deployment" >> $GITHUB_OUTPUT
